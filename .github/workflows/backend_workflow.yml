name: .NET Core
on: 
  workflow_dispatch:
env:
  AZURE_RESOURCE_GROUP: instantmessenger
  ################## AZURE APP SERVICES ########### 
  AZURE_API_WEBAPP_NAME: api-instantmessenger
  AZURE_WEBAPP_NAME: instantmessenger
  AZURE_WEBAPP_URL: https://instantmessenger.azurewebsites.net
  #################################################   
  ############### AZURE SQLDATABASE  ##############
  AZURE_DATABASE_SERVER: instantmessenger
  AZURE_DATABASE: instantmessengerdb
  #################################################
jobs:
  build: 
    runs-on: ubuntu-latest    
    steps:
    -
      uses:   actions/checkout@v1
      name:   Setup .NET core
    -
      uses:   actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.3
    - 
      name:  Build with dotnet
      run:  dotnet build --configuration Release
      
  publish_image:
    name: Publish Image
    runs-on: ubuntu-latest
    steps:
        - name: Check out the repo
          uses: actions/checkout@v2
        -
          name: Build and Push
          id: docker_build
          uses: docker/build-push-action@v1
          with:
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
            tag_with_ref: true
            repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{env.AZURE_API_WEBAPP_NAME}}                        
  deploy:
    needs: [publish_image]
    runs-on: ubuntu-latest  
    name: 'Deploy to Azure Containers Instances'  
    steps:
      - name: 'Login'
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}
      - uses: azure/docker-login@v1
        with:
          login-server: https://index.docker.io/v1/
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_TOKEN }}     
      - name: Setup env variables and connection strings
        shell: pwsh
        run: |
          az webapp config appsettings set --resource-group ${{env.AZURE_RESOURCE_GROUP}} --name ${{ env.AZURE_API_WEBAPP_NAME }} --settings ${{secrets.APP_SETTINGS}} IdentityOptions__ClientAppUrlBase=${{env.AZURE_WEBAPP_URL}}
          az webapp config connection-string set --resource-group ${{env.AZURE_RESOURCE_GROUP}} --name ${{ env.AZURE_API_WEBAPP_NAME }} --connection-string-type SQLServer --settings InstantMessengerDb="Server=tcp:${{env.AZURE_DATABASE_SERVER}}.database.windows.net,1433;Initial Catalog=${{env.AZURE_DATABASE}};Persist Security Info=False;User ID=${{secrets.AZURE_DATABASE_LOGIN}};Password=${{secrets.AZURE_DATABASE_PASSWORD}};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
          az extension add -n application-insights
          $APP_INSIGHTS_CS=$(az monitor app-insights component show --app ${{ env.AZURE_API_WEBAPP_NAME }} --resource-group ${{env.AZURE_RESOURCE_GROUP}} --query connectionString -o tsv)
          az webapp config appsettings set --resource-group ${{env.AZURE_RESOURCE_GROUP}} --name ${{ env.AZURE_API_WEBAPP_NAME }} --settings ApplicationInsights__ConnectionString="$APP_INSIGHTS_CS"
      - name: Deploy web app container
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{env.AZURE_API_WEBAPP_NAME}}
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{env.AZURE_API_WEBAPP_NAME}}
  migrate_database:
    needs: [deploy]
    runs-on: ubuntu-latest    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2      
      - name: Use production connection string
        uses: microsoft/variable-substitution@v1
        with:
          files: 'src/InstantMessenger.Api/appsettings.json'
        env:
          ConnectionStrings.InstantMessengerDb: "Server=tcp:${{env.AZURE_DATABASE_SERVER}}.database.windows.net,1433;Initial Catalog=${{env.AZURE_DATABASE}};Persist Security Info=False;User ID=${{secrets.AZURE_DATABASE_LOGIN}};Password=${{secrets.AZURE_DATABASE_PASSWORD}};MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"     
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}    
      - name: Public IP
        id: ip
        uses: haythem/public-ip@v1.2              
      - name: Add Azure Sql Server Firewall Rule
        run: |
          az sql server firewall-rule create --resource-group ${{env.AZURE_RESOURCE_GROUP}} --server ${{env.AZURE_DATABASE_SERVER}} --name allow_github_action --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}} --start-ip-address ${{ steps.ip.outputs.ipv4}} --end-ip-address ${{ steps.ip.outputs.ipv4}}      
      - name: Install dotnet tools
        run: |
          dotnet tool install --global dotnet-ef --version 5.0.3
          dotnet ef dbcontext list --project src/InstantMessenger.Api     
      - name: Update database
        shell: pwsh
        run: |
          ./scripts/update-database.ps1    
      - name: Remove Azure Sql Server Firewall Rule
        run: |
          az sql server firewall-rule delete --resource-group ${{env.AZURE_RESOURCE_GROUP}} --server ${{env.AZURE_DATABASE_SERVER}} --name allow_github_action --subscription ${{secrets.AZURE_SUBSCRIPTION_ID}}
